name: Build & Test
on:
  pull_request:
    branches: [main]
  push:
    branches: [main, rolling-prerelease]
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  ROLLING_PRERELEASE_VERSION: "1.6.0"
  GITHUB_ROLLING_PRERELEASE_NAME: "Version 1.6.0 rolling pre-release"
jobs:
    test:
        name: Build & Test
        runs-on: ${{ matrix.os }}
        strategy:
          fail-fast: false
          matrix:
            os: [ubuntu-latest, macos-latest]
            ocaml-compiler: ['4.14.1', '5.1.0']
            include:
            - os: ubuntu-latest
              TLAPM_ZIP: tlaps-1.6.0-x86_64-linux-gnu.tar.gz
            - os: macos-latest
              TLAPM_ZIP: tlaps-1.6.0-arm64-darwin.tar.gz
        env:
          EXAMPLES_DIR: "tlaplus-examples"
          SCRIPT_DIR: "tlaplus-examples/.github/scripts"
          DEPS_DIR: "tlaplus-examples/deps"
          DIST_DIR: "tlatools/org.lamport.tlatools/dist"
        steps:
            - name: asdf
              run: |
                echo ${{ github.ref_name }}
                echo ${{ matrix.ocaml-compiler }}
            - name: Clone repo
              uses: actions/checkout@v4
            - name: Install deps (ubuntu)
              if: matrix.os == 'ubuntu-latest'
              run: |
                sudo apt-get update
                sudo apt-get install --yes time
            - uses: ocaml/setup-ocaml@v2
              with:
                ocaml-compiler: ${{ matrix.ocaml-compiler }}
            - uses: actions/cache@v4
              id: cache
              with:
                path: _build_cache
                key: ${{ runner.os }}_build_cache
            - name: Install optional dependencies
              if: startsWith(matrix.ocaml-compiler, '5.')
              run: |
                eval $(opam env)
                make opam-deps-opt
            - name: Build TLAPM
              run: |
                eval $(opam env)
                make opam-deps
                # Workaround for https://github.com/tlaplus/tlapm/issues/88
                set +e
                for ((attempt = 1; attempt <= 5; attempt++)); do
                  rm -rf _build
                  make
                  if [ $? -eq 0 ]; then
                    make release RELEASE_VERSION=${{ env.ROLLING_PRERELEASE_VERSION }}
                    exit $?
                  fi
                done
                exit 1
            - name: "Upload release"
              if: github.ref_name == 'rolling-prerelease' && matrix.ocaml-compiler == '5.1.0'
              run: |
                ## Adapted from https://github.com/tlaplus/tlaplus repository
                ## Crawl release id
                DRAFT_RELEASE=$(curl -sS -H "Authorization: token ${{secrets.TLAPM_RELEASES_AT}}" https://api.github.com/repos/${{ github.repository }}/releases --header "Content-Type: application/json" | jq '.[]| select(.name=="${{ env.GITHUB_ROLLING_PRERELEASE_NAME }}") | .id')

                ## Delete old assets and upload replacement assets (if delete fails we still try to upload the new asset)
                ID=$(curl -sS -H "Authorization: token ${{secrets.TLAPM_RELEASES_AT}}" https://api.github.com/repos/${{ github.repository }}/releases/$DRAFT_RELEASE/assets --header "Content-Type: application/json"  | jq '.[]| select(.name == "${{ matrix.TLAPM_ZIP }}") | .id')
                curl -sS -X DELETE -H "Authorization: token ${{secrets.TLAPM_RELEASES_AT}}" https://api.github.com/repos/${{ github.repository }}/releases/assets/$ID
                curl -s -X POST -H "Content-Type: application/zip" -H "Authorization: token ${{secrets.TLAPM_RELEASES_AT}}" https://uploads.github.com/repos/${{ github.repository }}/releases/$DRAFT_RELEASE/assets?name=${{ matrix.TLAPM_ZIP }} --upload-file _build/${{ matrix.TLAPM_ZIP }}
            - name: Run tests
              run: |
                eval $(opam env)
                set +e
                make test
                TEST_RESULT=$?
                cat _build/default/test/tests.log
                exit $TEST_RESULT
            - name: Clone tlaplus/examples
              uses: actions/checkout@v4
              with:
                repository: tlaplus/examples
                path: ${{ env.EXAMPLES_DIR }}
            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version: '3.12'
            - name: Check proofs in TLA+ examples
              run: |
                mkdir -p "$DEPS_DIR"
                cp ./_build/tlaps*.tar.gz "$DEPS_DIR/tlaps.tar.gz"
                tar -xzf "$DEPS_DIR/tlaps.tar.gz" -C "$DEPS_DIR"
                rm "$DEPS_DIR/tlaps.tar.gz"
                mv $DEPS_DIR/tlaps* "$DEPS_DIR/tlapm-install"
                SKIP=(
                  # General proof failure
                  "specifications/Bakery-Boulangerie/Bakery.tla"
                  "specifications/Bakery-Boulangerie/Boulanger.tla"
                  "specifications/bcastByz/bcastByz.tla"
                  "specifications/byzpaxos/Consensus.tla"
                  "specifications/byzpaxos/VoteProof.tla"
                  "specifications/ewd998/AsyncTerminationDetection_proof.tla"
                  "specifications/ewd998/EWD998_proof.tla"
                  "specifications/LearnProofs/FindHighest.tla"
                  "specifications/LoopInvariance/BinarySearch.tla"
                  "specifications/LoopInvariance/Quicksort.tla"
                  "specifications/LoopInvariance/SumSequence.tla"
                  "specifications/lamport_mutex/LamportMutex_proofs.tla"
                  "specifications/TeachingConcurrency/SimpleRegular.tla"
                  # Failing and long-running
                  "specifications/byzpaxos/BPConProof.tla" # Takes about 30 minutes
                )
                python "$SCRIPT_DIR/check_proofs.py"            \
                  --tlapm_path "$DEPS_DIR/tlapm-install"        \
                  --manifest_path "$EXAMPLES_DIR/manifest.json" \
                  --skip "${SKIP[@]}"
